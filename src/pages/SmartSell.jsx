// src/pages/SmartSell.jsx
import React, { useState } from "react";
// Using fetch directly as GoogleGenerativeAI SDK might abstract error details we want
// import { GoogleGenerativeAI } from "@google/generative-ai"; // Keep if preferred, but adapt error handling

// Helper function to parse AI response into points (lines)
const parseAdvicePoints = (text) => {
  if (!text) return [];
  return text
    .split("\n") // Split by newline
    .map((line) => line.trim()) // Trim whitespace
    .filter((line) => line.length > 0); // Remove empty lines
};

const SmartSell = () => {
  const [formData, setFormData] = useState({
    crop: "",
    quantity: "",
    grade: "",
    location: "",
    urgency: "medium",
  });
  // const [advice, setAdvice] = useState(""); // Keep raw response if needed for debug
  const [advicePoints, setAdvicePoints] = useState([]); // State for parsed points
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const VITE_GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;
  const GEMINI_MODEL = "gemini-1.5-flash-latest"; // Use a recent, capable model

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!VITE_GEMINI_API_KEY) {
      setError(
        "Gemini API Key is missing. Please configure environment variables."
      );
      return;
    }

    setLoading(true);
    // setAdvice(""); // Clear raw response if you were storing it
    setAdvicePoints([]); // Clear previous points
    setError("");

    // --- Updated Prompt ---
    const prompt = `Act as an expert agricultural market advisor for a farmer.

Farmer's Situation:
- Crop: ${formData.crop}
- Quantity: ${formData.quantity}
- Quality Grade: ${formData.grade}
- Location (Nearest Market Area): ${formData.location}
- Selling Urgency: ${formData.urgency} (Options: low, medium, high)

Task: Provide actionable advice based on potential current market trends (use general knowledge). Focus on:
1.  Recommended Selling Channels (e.g., local markets, wholesalers, online platforms, specific mandis if applicable).
2.  Pricing Strategy suggestions (e.g., check specific market rates, consider grade, negotiate).
3.  Timing Advice (considering urgency and potential price fluctuations).
4.  Other relevant tips (e.g., storage, transportation, connecting with buyers).

**Output Format Rules:**
- Present advice as a list of concise, practical points.
- Each distinct point/suggestion MUST be on a NEW LINE.
- **DO NOT use any markdown formatting (like '*', '-', '_', '**', '#') or bullet characters.**
- Start directly with the first advice point. Be farmer-friendly.`;
    // --- End of Prompt ---

    try {
      console.log("Sending prompt to Gemini:", prompt); // Debug log

      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent?key=${VITE_GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            contents: [{ parts: [{ text: prompt }] }],
            // Optional: Add safety/generation configs if needed
          }),
        }
      );

      if (!response.ok) {
        let errorData;
        try {
          errorData = await response.json();
        } catch (e) {
          /* ignore json parse error */
        }
        const errorMsg =
          errorData?.error?.message ||
          `API request failed: ${response.statusText}`;
        console.error("Gemini API Error:", errorData);
        const blockReason = errorData?.promptFeedback?.blockReason;
        if (blockReason) {
          throw new Error(
            `Gemini request blocked: ${blockReason}. ${errorMsg}`
          );
        }
        throw new Error(errorMsg);
      }

      const data = await response.json();
      console.log("Gemini Response:", data); // Debug log

      const reply = data?.candidates?.[0]?.content?.parts?.[0]?.text;
      const finishReason = data?.candidates?.[0]?.finishReason;

      if (reply) {
        const parsed = parseAdvicePoints(reply);
        setAdvicePoints(parsed);
        if (parsed.length === 0 && reply.trim().length > 0) {
          setError(
            "Received advice but could not format it into points. Displaying raw text."
          );
          setAdvicePoints([reply]); // Fallback: show raw text as one point
          console.warn("Parsing resulted in empty array. Raw reply:", reply);
        } else if (parsed.length === 0) {
          setError("No specific advice points were generated by the AI.");
        }
      } else if (finishReason && finishReason !== "STOP") {
        setError(
          `AI generation stopped: ${finishReason}. The prompt might have been blocked.`
        );
      } else {
        setError("No advice text was generated by the AI.");
      }
    } catch (err) {
      console.error("Error fetching advice:", err);
      setError(`Failed to get advice: ${err.message}`);
      setAdvicePoints([]); // Clear points on error
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-100 py-10 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto bg-white shadow-xl rounded-xl p-6 sm:p-8 border border-gray-200">
        <h2 className="text-2xl sm:text-3xl font-bold text-indigo-800 mb-6 text-center">
          ðŸ“ˆ Smart Crop Selling Assistant
        </h2>

        <form
          onSubmit={handleSubmit}
          className="grid grid-cols-1 md:grid-cols-2 gap-5"
        >
          {/* Form Inputs with Labels */}
          <div>
            <label
              htmlFor="crop"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Crop Type
            </label>
            <input
              id="crop"
              name="crop"
              placeholder="e.g. Wheat"
              value={formData.crop}
              onChange={handleChange}
              required
              className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-400"
            />
          </div>

          <div>
            <label
              htmlFor="quantity"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Quantity
            </label>
            <input
              id="quantity"
              name="quantity"
              placeholder="e.g. 100 kg, 5 Quintal"
              value={formData.quantity}
              onChange={handleChange}
              required
              className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-400"
            />
          </div>

          <div>
            <label
              htmlFor="grade"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Quality Grade
            </label>
            <select
              id="grade"
              name="grade"
              value={formData.grade}
              onChange={handleChange}
              required
              className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-400 bg-white"
            >
              <option value="" disabled>
                -- Select Grade --
              </option>
              <option value="Premium">Premium (A)</option>
              <option value="Good">Good (B)</option>
              <option value="Fair">Fair (C)</option>
              <option value="Other">Other/Ungraded</option>
            </select>
          </div>

          <div>
            <label
              htmlFor="location"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Nearest Market Area/City
            </label>
            <input
              id="location"
              name="location"
              placeholder="e.g. Pune, Nashik APMC"
              value={formData.location}
              onChange={handleChange}
              required
              className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-400"
            />
          </div>

          {/* Urgency - Spanning full width */}
          <div className="md:col-span-2">
            <label
              htmlFor="urgency"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Selling Urgency
            </label>
            <select
              id="urgency"
              name="urgency"
              value={formData.urgency}
              onChange={handleChange}
              className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-400 bg-white"
            >
              <option value="low">Low (Can wait for better price)</option>
              <option value="medium">
                Medium (Flexible within a few weeks)
              </option>
              <option value="high">High (Need to sell soon)</option>
            </select>
          </div>

          {/* Submit Button - Spanning full width */}
          <div className="md:col-span-2 text-center pt-2">
            <button
              type="submit"
              disabled={
                loading ||
                !formData.crop ||
                !formData.quantity ||
                !formData.grade ||
                !formData.location
              }
              className={`bg-indigo-600 hover:bg-indigo-700 text-white py-3 px-8 rounded-lg font-semibold text-base shadow-md transition-all duration-200 ease-in-out disabled:opacity-60 disabled:cursor-not-allowed ${
                loading ? "animate-pulse" : ""
              }`}
              aria-live="polite"
            >
              {loading ? "Generating Advice..." : "Get Selling Advice"}
            </button>
          </div>
        </form>

        {/* Error Display */}
        {error && (
          <div
            role="alert"
            className="mt-6 text-center text-red-600 bg-red-50 p-3 rounded-lg border border-red-200 font-medium"
          >
            {error}
          </div>
        )}

        {/* Advice Points Display */}
        {!loading && advicePoints.length > 0 && (
          <div className="mt-8">
            <h3 className="text-xl font-semibold text-indigo-700 mb-4 border-b pb-2">
              ðŸ’¡ Selling Strategy Advice:
            </h3>
            <div className="flex flex-col space-y-3">
              {" "}
              {/* Vertical list */}
              {advicePoints.map((point, index) => (
                <div
                  key={index}
                  className="flex items-start p-3 bg-purple-50 border border-purple-200 rounded-lg shadow-sm transition-all hover:shadow-md"
                >
                  <span className="flex-shrink-0 w-5 h-5 mr-3 mt-0.5 text-purple-600">
                    {" "}
                    {/* Icon */}
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-5 w-5"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                    >
                      <path
                        fillRule="evenodd"
                        d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L9 9.414V13a1 1 0 102 0V9.414l1.293 1.293a1 1 0 001.414-1.414z"
                        clipRule="evenodd"
                      />
                    </svg>
                  </span>
                  <p className="text-gray-800 text-sm sm:text-base">{point}</p>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Initial State Message */}
        {!loading && !error && advicePoints.length === 0 && (
          <p className="text-center text-gray-500 mt-10">
            Fill in the details above to get personalized selling advice for
            your crop.
          </p>
        )}
      </div>
    </div>
  );
};

export default SmartSell;
