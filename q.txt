import React, { useState } from "react";
import axios from "axios";
import CropReport from "../components/CropResult";

const CropSuggest = () => {
  const [formData, setFormData] = useState({
    location: "",
    soilType: "",
    rainfall: "",
    preferredDuration: "",
    preferredCrop: "",
  });

  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleChange = (e) => {
    setFormData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setResult(null);

    const prompt = `You are an expert agricultural assistant AI. Your task is to analyze the provided user data and recommend the most suitable crop.

Based *only* on the following user data:
{
  "location": "${formData.location}",
  "soil_type": "${formData.soilType}",
  "rainfall_mm": ${formData.rainfall},
  "preferred_duration": "${formData.preferredDuration}",
  "preferred_crop": "${formData.preferredCrop || "None"}"
}

Generate a single, valid JSON object containing the recommendation details. Adhere *strictly* to the specified keys and data types below.

The JSON object must have the following structure:
{
  "crop": "string",
  "sowing_season": "string",
  "duration": "string",
  "care_tips": ["string", "string", "string"],
  "climate": "string",
  "irrigation_needs": "string",
  "fertilizer_recommendations": "string"
}

IMPORTANT: Output *only* the raw JSON object. Do not include any text or formatting.`;

    try {
      const apiKey = import.meta.env.VITE_GEMINI_API_KEY;

      const response = await axios.post(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`,
        {
          contents: [{ parts: [{ text: prompt }] }],
        },
        {
          headers: { "Content-Type": "application/json" },
        }
      );

      const reply =
        response.data.candidates?.[0]?.content?.parts?.[0]?.text ?? "No suggestion received.";
      console.log("Raw reply from Gemini:", reply);

      let parsed;
      try {
        const jsonMatch = reply.match(/\{[\s\S]*\}/);
        parsed = jsonMatch ? JSON.parse(jsonMatch[0]) : { crop: "Could not parse suggestion." };
      } catch (error) {
        console.error("Failed to parse JSON:", error);
        parsed = { crop: "Error parsing suggestion." };
      }

      setResult(parsed);
    } catch (err) {
      console.error("API error:", err);
      setResult({
        error: "Something went wrong while fetching the suggestion.",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-3xl mx-auto mt-12 px-6 sm:px-10">
      <form onSubmit={handleSubmit}>
        <div className="space-y-12 bg-white p-10 rounded-lg shadow-md">
          <div className="border-b border-gray-200 pb-10">
            <h2 className="text-lg font-semibold leading-7 text-green-700">Crop Suggestion Form</h2>
            <p className="mt-1 text-sm leading-6 text-gray-600">
              Fill in your farming conditions to get the best crop recommendation.
            </p>

            <div className="mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
              <div className="sm:col-span-3">
                <label htmlFor="location" className="block text-sm font-medium leading-6 text-gray-900">
                  Location
                </label>
                <div className="mt-2">
                  <input
                    type="text"
                    name="location"
                    id="location"
                    value={formData.location}
                    onChange={handleChange}
                    required
                    className="block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:ring-green-600 focus:border-green-600 sm:text-sm"
                    placeholder="e.g. Maharashtra"
                  />
                </div>
              </div>

              <div className="sm:col-span-3">
                <label htmlFor="soilType" className="block text-sm font-medium leading-6 text-gray-900">
                  Soil Type
                </label>
                <div className="mt-2">
                  <select
                    name="soilType"
                    id="soilType"
                    value={formData.soilType}
                    onChange={handleChange}
                    required
                    className="block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:ring-green-600 focus:border-green-600 sm:text-sm"
                  >
                    <option value="">-- Select Soil Type --</option>
                    <option value="Sandy">Sandy</option>
                    <option value="Loamy">Loamy</option>
                    <option value="Silty">Silty</option>
                    <option value="Clay">Clay</option>
                    <option value="Peaty">Peaty</option>
                    <option value="Chalky">Chalky</option>
                    <option value="Red Sandy">Red Sandy</option>
                    <option value="Black Sandy">Black Sandy</option>
                    <option value="Coarse Sand">Coarse Sand</option>
                    <option value="Fine Sand">Fine Sand</option>
                  </select>
                </div>
              </div>

              <div className="sm:col-span-3">
                <label htmlFor="rainfall" className="block text-sm font-medium leading-6 text-gray-900">
                  Rainfall (mm)
                </label>
                <div className="mt-2">
                  <input
                    type="number"
                    name="rainfall"
                    id="rainfall"
                    value={formData.rainfall}
                    onChange={handleChange}
                    required
                    className="block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:ring-green-600 focus:border-green-600 sm:text-sm"
                    placeholder="e.g. 850"
                  />
                </div>
              </div>

              <div className="sm:col-span-3">
                <label htmlFor="preferredDuration" className="block text-sm font-medium leading-6 text-gray-900">
                  Preferred Duration
                </label>
                <div className="mt-2">
                  <input
                    type="text"
                    name="preferredDuration"
                    id="preferredDuration"
                    value={formData.preferredDuration}
                    onChange={handleChange}
                    required
                    className="block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:ring-green-600 focus:border-green-600 sm:text-sm"
                    placeholder="e.g. 90 days"
                  />
                </div>
              </div>

              <div className="sm:col-span-6">
                <label htmlFor="preferredCrop" className="block text-sm font-medium leading-6 text-gray-900">
                  Preferred Crop (optional)
                </label>
                <div className="mt-2">
                  <input
                    type="text"
                    name="preferredCrop"
                    id="preferredCrop"
                    value={formData.preferredCrop}
                    onChange={handleChange}
                    className="block w-full rounded-md border border-gray-300 py-2 px-3 shadow-sm focus:ring-green-600 focus:border-green-600 sm:text-sm"
                    placeholder="e.g. Rice"
                  />
                </div>
              </div>
            </div>
          </div>

          <div className="mt-6 flex items-center justify-end gap-x-6">
            <button
              type="submit"
              className="rounded-md bg-green-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-green-700"
            >
              {loading ? "Generating..." : "Get Crop Suggestion"}
            </button>
          </div>

          {result && <div className="mt-10"><CropReport data={result} /></div>}
        </div>
      </form>
    </div>
  );
};

export default CropSuggest;
